<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Bug tracker application</title>
    <script src="~/Scripts/jquery-2.0.3.min.js"></script>
    <script src="~/Scripts/knockout-3.0.0.js"></script>
    <script src="~/Scripts/jquery.signalR-2.0.1.min.js"></script>
    <script src="~/signalr/hubs" type="text/javascript"></script>
    <script>
        $(function () {
            var viewModel;

            $.connection.hub.logging = true;
            var bugsHub = $.connection.bugs;

            bugsHub.client.moved = function (item) {
                viewModel.moveBug(item);
            };

            bugsHub.client.added = function (item) {
                viewModel.addMyBug(item);
            };

            bugsHub.client.deleted = function (item) {
                viewModel.deleteMyBug(item);
            };

            $.connection.hub.start().done(function () {
                console.log('hub connection open');
            });

            $.getJSON('@Url.Content("~/api/bugs")', function (data) {
                var model = data;

                viewModel = {
                    backlog: ko.observableArray(model.filter(function (element) { return element.state === 'backlog'; })),
                    working: ko.observableArray(model.filter(function (element) { return element.state === 'working'; })),
                    done: ko.observableArray(model.filter(function (element) { return element.state === 'done'; })),
                    bugId: ko.observable(),
                    bugTitle: ko.observable(),
                    bugDescription: ko.observable(),
                    bugStates: ko.observableArray([
                        { Value: 0, Text: "backlog" },
                        { Value: 1, Text: "working" },
                        { Value: 2, Text: "done" }
                    ]),
                    bugStateId: ko.observable(),
                    @*changeState: function (bug, newState) {
                        $.post('@Url.Content("~/api/bugs/")' + newState, { 'id': bug.id });
                    },*@
                    changeState: function (bug, newState) {
                        $.ajax({
                            url: '/api/bugs/' + bug.id,
                            type: 'PUT',
                            data: "&state=" + newState
                        });
                    },
                    addBug: function () {
                        $.ajax({
                            url: '/api/bugs/',
                            type: 'POST',
                            data: "id=" + this.bugId() + "&title=" + this.bugTitle() + "&description=" + this.bugDescription() + "&state=" + this.bugStates()[this.bugStateId()].Text,
                            success: function (data) {
                                $('#addbug')[0].reset();
                            }
                        });

                    },
                    deleteBug: function (bug) {
                        if (confirm('Are you sure to Delete "' + bug.title + '" ?')) {
                            $.ajax({
                                url: '/api/bugs/' + bug.id,
                                type: 'DELETE'
                            });
                        }
                    },
                    moveBug: function (bug) {
                        //remove the item from one of the existing lists
                        [this.backlog, this.working, this.done].forEach(function (list) {
                            list().forEach(function (item) {
                                if (item.id == bug.id) {
                                    console.log('removing item ' + item.id);
                                    list.remove(item);
                                }
                            });
                        });

                        // add bug to correct list
                        this[bug.state].push(bug);
                    },
                    addMyBug: function (bug) {
                        // add bug to correct list
                        this[bug.state].push(bug);
                    },

                    deleteMyBug: function (bug) {
                        // remove bug to from list
                        [this.backlog, this.working, this.done].forEach(function (list) {
                            list().forEach(function (item) {
                                if (item.id == bug.id) {
                                    console.log('removing item ' + item.id);
                                    list.remove(item);
                                }
                            });
                        });
                    }
                };
                ko.applyBindings(viewModel);
            })
        })
    </script>
</head>
<body>
    <header>
        <h1>Bug tracker Single Page application</h1>
    </header>
    <section>
        <h2>Backlog</h2>
        <ul class="bugs" id="backlog" data-bind="foreach:backlog">
            <li id="backlogItems">
                [<span data-bind="text: id"></span>] <span data-bind="text: title"></span>: <span data-bind="text: description"></span>
                <span id="deleteBug" data-bind="click: $root.deleteBug.bind($root, $data)">
                    &nbsp;&nbsp; <img src="images/delete.png" alt="close" height="10" width="10">
                </span>
                <ul id="bugStates">
                    <li><a href="#" id="moveToWorking" data-bind="click: $root.changeState.bind($root, $data, 'working')">Move to working</a></li>
                    <li><a href="#" id="moveToDone" data-bind="click: $root.changeState.bind($root, $data, 'done')">Move to done</a></li>
                </ul>
            </li>
        </ul>
    </section>

    <section>
        <h2>Working</h2>
        <ul class="bugs" id="working" data-bind="foreach:working">
            <li id="workingItems">
                [<span data-bind="text: id"></span>] <span data-bind="text: title"></span>: <span data-bind="text: description"></span>
                &nbsp;&nbsp;
                <span id="deleteBug" data-bind="click: $root.deleteBug.bind($root, $data)">
                    <img src="images/delete.png" alt="close" height="10" width="10">
                </span>
                <ul id="bugStates">
                    <li><a href="#" id="moveToBacklog" data-bind="click: $root.changeState.bind($root, $data, 'backlog')">Move to backlog</a></li>
                    <li><a href="#" id="moveToDone" data-bind="click: $root.changeState.bind($root, $data, 'done')">Move to done</a></li>
                </ul>
            </li>
        </ul>
    </section>

    <section>
        <h2>Done</h2>
        <ul class="bugs" id="done" data-bind="foreach:done">
            <li id="doneItems">
                [<span data-bind="text: id"></span>] <span data-bind="text: title"></span>: <span data-bind="text: description"></span>
                <span id="deleteBug" data-bind="click: $root.deleteBug.bind($root, $data)">
                    &nbsp;&nbsp; <img src="images/delete.png" alt="close" height="10" width="10">
                </span>
                <ul id="bugStates">
                    <li><a href="#" id="moveToBacklog" data-bind="click: $root.changeState.bind($root, $data, 'backlog')">Move to backlog</a></li>
                    <li><a href="#" id="moveToWorking" data-bind="click: $root.changeState.bind($root, $data, 'working')">Move to working</a></li>
                </ul>
            </li>
        </ul>
    </section>
    <section>
        <h3> Add new bug</h3>
        <form name="input" id="addbug" data-bind="submit:$root.addBug">
            <label>Bug Id </label>
            <input type="text" name="Id" id="bugId" class="input-xlarge" data-bind="value:bugId"> <br />
            <label>Bug Title </label>
            <input type="text" name="Title" id="bugTitle" class="input-xlarge" data-bind="value:bugTitle"> <br />
            <label>Bug Description </label>
            <input type="text" name="Description" id="bugDescription" class="input-xlarge" data-bind="value:bugDescription"> <br />
            <label>Bug State </label>
            <select data-bind="options: bugStates, optionsValue: 'Value', optionsText: 'Text', value: bugStateId"></select>

            <button type="submit" id="submitBtn" class="btn btn-default">Submit</button>
        </form>
    </section>
</body>
</html>